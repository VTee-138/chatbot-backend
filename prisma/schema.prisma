generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(uuid())
  email                String?       @unique
  avatarUrl            String?       @map("avatar_url")
  passwordHash         String?       @map("password_hash")
  emailVerifiedAt      DateTime?     @map("email_verified_at")
  createdAt            DateTime      @default(now()) @map("created_at")
  updatedAt            DateTime?     @updatedAt @map("updated_at")
  role                 Role          @default(user)
  twoFactorBackupCodes String[]      @map("two_factor_backup_codes")
  twoFactorEnabled     Boolean       @default(false) @map("two_factor_enabled")
  twoFactorSecret      String?       @map("two_factor_secret")
  phoneNumber          String?       @map("phone_number")
  userName             String?       @unique @map("user_name")
  groupMembers         GroupMember[]
  groups               Group[]
  ssoAccounts          SsoAccount[]
  orders               Order[]
  payments             Payment[]

  @@map("users")
}

model SsoAccount {
  provider   String
  userId     String @map("user_id")
  providerId String @map("provider_id")
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerId])
  @@map("sso_accounts")
}

model Plan {
  id             String         @id @default(uuid())
  name           String
  price          Float
  limits         Json
  type           PlanType
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime?      @updatedAt @map("updated_at")
  subscriptions  Subscription[]
  subscriptionId String

  @@map("plans")
}

model Group {
  id                String    @id @default(uuid())
  name              String
  ownerId           String    @map("owner_id")
  autoAssignEnabled Boolean   @default(false) @map("auto_assign_enabled")
  aiModelCredits    Float     @default(0) @map("ai_model_credits")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  aiUsageLog     AiUsageLog[]
  channels       Channel[]
  conversations  Conversation[]
  customers      Customer[]
  groupMembers   GroupMember[]
  users          User           @relation(fields: [ownerId], references: [id])
  subscriptions  Subscription[]
  subscriptionId String

  @@unique([name, ownerId])
  @@map("groups")
}

model GroupMember {
  id               String           @id @default(uuid())
  role             GroupRole        @default(member)
  userId           String           @map("user_id")
  groupId          String           @map("group_id")
  status           InvitationStatus @default(accepted)
  assignmentWeight Int              @default(0) @map("assignment_weight")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime?        @updatedAt @map("updated_at")
  groups           Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Conversation     Conversation[]

  @@unique([userId, groupId])
  @@map("group_members")
}

model Subscription {
  id        String             @id @default(uuid())
  groupId   String             @map("group_id")
  planId    String             @map("plan_id")
  status    SubscriptionStatus @default(pending)
  expireAt  DateTime?          @map("expire_at")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime?          @updatedAt @map("updated_at")

  groups Group @relation(fields: [groupId], references: [id])
  plans  Plan  @relation(fields: [planId], references: [id])

  @@index([groupId])
  @@map("subscriptions")
}

model Tag {
  id        String    @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  customers Customer[]

  @@map("tags")
}

model AiUsageLog {
  id             String       @id @default(uuid())
  modelName      String       @map("model_name")
  totalTokens    Int          @map("total_tokens")
  cost           Float
  createdAt      DateTime     @default(now()) @map("created_at")
  groupId        String       @map("group_id")
  conversationId String       @map("conversation_id")
  conversations  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  groups         Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("ai_usage_logs")
}

model Channel {
  id           String          @id @default(uuid())
  name         String
  provider     ChannelProvider
  providerId   String          @map("provider_id")
  accessToken  String?         @map("access_token")
  refreshToken String?         @map("refresh_token")
  groupId      String          @map("group_id")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime?       @updatedAt @map("updated_at")
  status       ChannelStatus   @default(active)

  groups        Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@unique([provider, providerId])
  @@index([groupId])
  @@map("channels")
}

model Conversation {
  id                     String       @id @default(uuid())
  groupId                String       @map("group_id")
  channelId              String       @map("channel_id")
  customerId             String       @map("customer_id")
  assigneeId             String?      @map("assignee_id")
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime?    @updatedAt @map("updated_at")
  chatbotEnabled         Boolean      @default(true) @map("chatbot_enabled")
  providerConversationId String       @unique @map("provider_conversation_id")
  lastMessageAt          DateTime     @default(now()) @map("last_message_at")
  providerAdId           String?      @map("provider_ad_id")
  aiUsageLog             AiUsageLog[]
  groupMembers           GroupMember? @relation(fields: [assigneeId], references: [id])
  channels               Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  customers              Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  groups                 Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages               Message[]

  @@index([assigneeId])
  @@index([groupId])
  @@map("conversations")
}

model Customer {
  id             String    @id @default(uuid())
  fullName       String    @map("full_name")
  avatarUrl      String?   @map("avatar_url")
  phoneNumber    String?   @map("phone_number")
  email          String?
  identityNumber String?   @map("identity_number") // CCCD/CMND
  address        String?
  dateOfBirth    DateTime? @map("date_of_birth")
  gender         Gender?
  notes          String?   @db.Text
  groupId        String    @map("group_id")
  tagId          String?   @map("tag_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  conversations Conversation[]
  groups        Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tags          Tag?           @relation(fields: [tagId], references: [id])

  @@index([groupId])
  @@index([email])
  @@index([phoneNumber])
  @@map("customers")
}

model Message {
  id             String        @id @default(uuid())
  conversationId String        @map("conversation_id")
  senderId       String?       @map("sender_id")
  senderType     SenderType    @default(customer) @map("sender_type")
  content        String        @db.Text
  messageType    MessageType   @default(text) @map("message_type")
  status         MessageStatus @default(sent)
  deliveredAt    DateTime?     @map("delivered_at")
  readAt         DateTime?     @map("read_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")

  conversations       Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message_attachments MessageAttachment[]
  replyToMessageId    String?             @map("reply_to_message_id")
  replyToMessage      Message?            @relation("MessageReplies", fields: [replyToMessageId], references: [id], onDelete: SetNull)
  replies             Message[]           @relation("MessageReplies")

  @@map("messages")
}

model MessageAttachment {
  id             String         @id @default(uuid())
  messageId      String         @map("message_id")
  attachmentType AttachmentType @map("attachment_type")
  fileUrl        String         @map("file_url")
  fileName       String?        @map("file_name")
  fileSize       Int?           @map("file_size")
  mimeType       String?        @map("mime_type")

  thumbnailUrl String? @map("thumbnail_url")
  width        Int?
  height       Int?
  duration     Int?

  providerFileId   String? @map("provider_file_id")
  providerMetadata Json?   @map("provider_metadata")

  createdAt DateTime @default(now()) @map("created_at")

  messages Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([attachmentType])
  @@map("message_attachments")
}

model Order {
  id         String      @id @default(uuid()) @map("id")
  orderCode  String      @unique @map("order_code")
  userId     String      @map("user_id")
  targetType String      @map("target_type")
  targetId   String      @map("target_id")
  amount     Decimal     @map("amount")
  status     OrderStatus @default(unpaind) @map("status")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime?   @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  payments Payment[]
}

model Payment {
  id            String        @id @default(uuid()) @map("id")
  orderId       String        @map("order_id")
  userId        String        @map("user_id")
  amount        Decimal       @map("amount")
  method        String?       @map("method")
  status        PaymentStatus @default(pending) @map("status")
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

enum Role {
  user
  admin
}

enum PlanType {
  personal
  groups
}

enum ChannelProvider {
  facebook
  zalo
  instagram
}

enum ChannelStatus {
  active
  inactive
  pending
  error
}

enum GroupRole {
  manager
  member
  owner
}

enum InvitationStatus {
  pending
  accepted
  declined
}

enum SubscriptionStatus {
  active
  expired
  cancelled
  pending
}

enum MessageType {
  text
  image
  file
  audio
  video
  sticker
}

enum Direction {
  incoming
  outgoing
}

enum SenderType {
  customer
  bot
}

enum MessageStatus {
  sent
  delivered
  read
  failed
}

enum AttachmentType {
  image
  video
  audio
  file
  sticker
  location
  contact
}

enum Gender {
  male
  female
  other
  prefer_not_to_say
}

enum PaymentStatus {
  pending
  success
  failed
  refunded
}

enum OrderStatus {
  unpaind
  paid
}
