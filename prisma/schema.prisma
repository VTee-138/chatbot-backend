generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(cuid())
  fullName                  String?
  userName                  String?                     @unique
  email                     String                      @unique
  phone                     String?                     @unique
  avatarUrl                 String?
  role                      Role                        @default(USER)
  passwordHash              String?
  emailVerifiedAt           DateTime?
  lastLogin                 DateTime?
  twoFactorEnabled          Boolean                     @default(false)
  twoFactorSecret           String?
  twoFactorBackupCodes      String[]
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  conversations             conversations[]
  email_verification_tokens email_verification_tokens[]
  group_members             group_members[]
  groups                    groups[]
  invitations               invitations[]
  notes                     notes[]
  password_reset_tokens     password_reset_tokens[]
  sessions                  sessions[]
  ssoAccounts               ssoAccount[]

  @@map("users")
}

model ssoAccount {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@map("sso_accounts")
}

model email_verification_tokens {
  id        String   @id
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model invitations {
  id          String           @id
  email       String
  role        GroupRole        @default(MEMBER)
  token       String           @unique
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  groupId     String
  invitedById String
  createdAt   DateTime         @default(now())
  groups      groups           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users       User             @relation(fields: [invitedById], references: [id])
}

model password_reset_tokens {
  id        String   @id
  tokenHash String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model plans {
  id                  String   @id
  name                String   @unique
  price               Float
  maxGroups           Int      @default(1)
  maxMembersPerGroup  Int      @default(1)
  maxChannelsPerGroup Int      @default(1)
  groups              groups[]
}

model sessions {
  id               String   @id
  userId           String
  refreshTokenHash String   @unique
  expiresAt        DateTime
  userAgent        String?
  ipAddress        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  users            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model channels {
  id                String          @id
  name              String
  provider          ChannelProvider
  providerChannelId String
  groupId           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime
  groups            groups          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  conversations     conversations[]

  @@unique([provider, providerChannelId, groupId])
}

model conversations {
  id            String             @id
  status        ConversationStatus @default(OPEN)
  lastMessageAt DateTime           @default(now())
  groupId       String
  channelId     String
  customerId    String
  assigneeId    String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
  users         User?              @relation(fields: [assigneeId], references: [id])
  channels      channels           @relation(fields: [channelId], references: [id], onDelete: Cascade)
  customers     customers          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  groups        groups             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  messages      messages[]
}

model customers {
  id            String          @id
  fullName      String?
  avatarUrl     String?
  email         String?
  phone         String?
  groupId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  conversations conversations[]
  groups        groups          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  notes         notes[]
  tags          tags[]          @relation("CustomerToTag")
}

model group_members {
  id        String    @id
  role      GroupRole @default(MEMBER)
  userId    String
  groupId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  groups    groups    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model groups {
  id            String          @id
  name          String
  slug          String          @unique
  logoUrl       String?
  planId        String
  creatorId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  channels      channels[]
  conversations conversations[]
  customers     customers[]
  group_members group_members[]
  users         User            @relation(fields: [creatorId], references: [id])
  plans         plans           @relation(fields: [planId], references: [id])
  invitations   invitations[]
  tags          tags[]
}

model messages {
  id                String           @id
  content           String
  direction         MessageDirection
  externalMessageId String?          @unique
  conversationId    String
  createdAt         DateTime         @default(now())
  conversations     conversations    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model notes {
  id         String    @id
  content    String
  customerId String
  authorId   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  users      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  customers  customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model tags {
  id        String      @id
  name      String
  color     String
  groupId   String
  groups    groups      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  customers customers[] @relation("CustomerToTag")

  @@unique([groupId, name])
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  PLUS
  PRO
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ChannelProvider {
  FACEBOOK
  ZALO
  INSTAGRAM
  WEBSITE_LIVECHAT
}

enum ConversationStatus {
  OPEN
  CLOSED
  PENDING
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}
